
REQUIRED LIBRARIES ---------------------------------------------------------------------
You must have pulp, numpy and random

PHASE TRIALS AND HYPOTHESIS CHECKINGS ----------------------------------------------------
For example, enter: python solve_phase.py classic 30 2 1000
4 args:
    - first one is the mode: classic for merges to be only btw different clusters, general for it to be btw every 2 clusters, intra_cluster_only for it to be in the same cluster only.
    - second one is k, capacity of each cluster
    - third one is l, number of clusters
    - fourth one is the number of trials, so the number of phases that will be done
A phase starts with l clusters, filled with singletons. The program will try to merge 2 compoenents at each steps, until a merge fails.
In solve_phase.py, there is the main for loop that tries every phase. For now, the properties that we want to check are tested in this loop. 


ONE CASCADE SOLVING -------------------------------------------------------------------
the graphes are represented with strings as follows:
    - each line represent a cluster. Each integer on this line is the size of a component that is contained in the cluster
    - n and m integers, n^m means that components of size n are repeated m times
    - to indicate what components should be merged, put a '*' right after the 2 components to be merged

for exemple, the graph:
    1st cluster : components of sizes 8 and 4
    2nd cluster : components of sizes 8 and 4
    3rd cluster : twelve components of sizes 1
    Merge the 4 in 1st and 2nd components
has this representation:
4* 8
4* 8
1^12

HOW TO RUN IT -------------------------------------------------------------------------------
run: python -m evaluation.test.py
before that, you can change the inputs by changing the variable graph_file_address. It must be the address of a text file organised as shown above

HOW ARE COMPONENTS INDEXED ? ----------------------------------------------------------------
    - to indicate what components must merge together, the algo give every components an index (= id).
      How do we find the index ? From left to right, from above to below, count the components starting from 0.
      For exemple on the graph above, the 4 on the 1st cluster has index 0, the 8 on the 2nd cluster has index 3
