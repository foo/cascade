------------------------------------------------------------------------------------------
REQUIRED LIBRARIES ---------------------------------------------------------------------
Python dependencies: 
$ pip3 install pulp numpy matplotlib

External software dependencies:
GLPK
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
LIST OF EXECUTABLES ----------------------------------------------------------------------
------------------------------------------------------------------------------------------

solve_cascade.py
solve_random_phase.py
solve_max_phase.py

------------------------------------------------------------------------------------------
SOLVING A SINGE CASCADE INSTANCE --------------------------------------------------------
------------------------------------------------------------------------------------------

Describe the configuration and components to be merged (in a file, see below).
Run solve_cascade.py with no arguments.

the graphs are represented with strings as follows:
    - each line represent a cluster. Each integer on this line is the size of a component that is contained in the cluster
    - n and m integers, n^m means that components of size n are repeated m times
    - to indicate what components should be merged, put a '*' right after the 2 components to be merged

For example, the graph:
    1st cluster : components of sizes 8 and 4
    2nd cluster : components of sizes 8 and 4
    3rd cluster : twelve components of sizes 1
    Merge the 4 in 1st and 2nd components
has this representation:
4* 8
4* 8
1^12

The path to the input is provided in the variable graph_file_address (default: evaluation/graph_test2.txt). 

------------------------------------------------------------------------------------------
RANDOM PHASE AND HYPOTHESIS CHECKINGS ----------------------------------------------------
------------------------------------------------------------------------------------------

Usage example: python3 solve_random_phase.py classic 30 2 1000
4 args:
    - first one is the mode: classic for merges to be only btw different clusters, general for it to be btw every 2 clusters, intra_cluster_only for it to be in the same cluster only.
    - second one is k, capacity of each cluster
    - third one is l, number of clusters
    - fourth one is the number of trials, so the number of phases that will be done
A phase starts with l clusters, filled with singletons. The program will try to merge 2 components at each steps, until a merge fails.
In solve_phase.py, there is the main for loop that tries every phase. For now, the properties that we want to check are tested in this loop. 



------------------------------------------------------------------------------------------
MAXIMUM COST PHASE  ----------------------------------------------------
------------------------------------------------------------------------------------------

Usage example: python3 solve_max_phase 10 2

(2 arguments: k and l)

The program returns the cost of the most costly phase.


------------------------------------------------------------------------------------------
NOTE ON PERFORMANCE ----------------------------------------------------
------------------------------------------------------------------------------------------

Install nuitka: $ pip3 install nuitka
Compile a python script: $ python3 -m nuitka solve_max_phase.py
Run the compiled version: $ ./solve_max_phase.bin 10 2